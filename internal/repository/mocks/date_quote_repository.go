// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	datatypes "gorm.io/datatypes"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "github.com/duyquang6/quote-today/internal/model"
)

// DateQuoteRepository is an autogenerated mock type for the DateQuoteRepository type
type DateQuoteRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, tx, purchase
func (_m *DateQuoteRepository) Create(ctx context.Context, tx *gorm.DB, purchase *model.DateQuote) error {
	ret := _m.Called(ctx, tx, purchase)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *model.DateQuote) error); ok {
		r0 = rf(ctx, tx, purchase)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecreaseLikeByOne provides a mock function with given fields: ctx, tx, date
func (_m *DateQuoteRepository) DecreaseLikeByOne(ctx context.Context, tx *gorm.DB, date datatypes.Date) error {
	ret := _m.Called(ctx, tx, date)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, datatypes.Date) error); ok {
		r0 = rf(ctx, tx, date)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, tx, date
func (_m *DateQuoteRepository) Get(ctx context.Context, tx *gorm.DB, date datatypes.Date) (model.DateQuote, error) {
	ret := _m.Called(ctx, tx, date)

	var r0 model.DateQuote
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, datatypes.Date) model.DateQuote); ok {
		r0 = rf(ctx, tx, date)
	} else {
		r0 = ret.Get(0).(model.DateQuote)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, datatypes.Date) error); ok {
		r1 = rf(ctx, tx, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseLikeByOne provides a mock function with given fields: ctx, tx, date
func (_m *DateQuoteRepository) IncreaseLikeByOne(ctx context.Context, tx *gorm.DB, date datatypes.Date) error {
	ret := _m.Called(ctx, tx, date)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, datatypes.Date) error); ok {
		r0 = rf(ctx, tx, date)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
